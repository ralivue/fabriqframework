TO UPDATE TO VERSION 0.12 OF FABRIQ FROM 0.11

 - Expand the downloaded archive (.zip or .tar.gz file)
 
 - Copy the following files from the expanded archive to the /core directory
   of your Fabriq web application(s)/website(s) (NOTE: be sure if you have edited
   these files to back up your changes. IT IS STRONGLY RECOMMENDED THAT YOU DO NOT
   MAKE CHANGES TO CORE FILES IN ORDER TO EASILY UPGRADE BETWEEN VERSIONS!):
   - /core/BaseMapping.class.php
   - /core/Controller.class.php
   - /core/Database.class.php
   - /core/Fabriq.class.php
   - /core/fabriq.js
   - /core/Model.class.php
   - /core/Messaging.class.php
   
 - Copy the following file(s) from the expanded archive to the /public/stylesheets directory
   of your Fabriq web application(s)/website(s):
   - /public/stylesheets/fabriq.base.css
   
 - Copy the index.php file from the expanded archive to the / (root) directory
   of your Fabriq web application(s)/website(s)
   
 - WARNING: All functions that have been marked as deprecated in past versions were removed in
   version 0.12

NOTES (READ CAREFULLY FOR FURTHER DETAILS ON UPDATING):
 - When updating between versions, if your version is more than 2 minor versions different (the
   minor version is the first number after the first decimal point starting from the left),
   you should download updates and apply them in order for all versions between the version you
   are currently using and the latest release. Be sure to read the UPDATE.txt file for each
   release as each release may contain different instructions based on updates provided.
   
 - When referencing mapping functions, the PathMap class should be referenced and
   not the BaseMapping class. The PathMap class extends the BaseMapping class and
   therefore has inherits all of the BaseMapping class' functionality.
   
 - The /core/Messaging.class.php file has been added to create an object-oriented way
   of adding messages to your pages. The core file manages errors, successes, warnings,
   and general messages. To add more functionality to the messaging system, extend the
   Messaging class and include the class in your /app/controllers/application.controller.php
   file. Then, in your code, reference the class that you created as a singleton class
   (ex: MyMessaging::message('Test error message', 'new variable added in extended class');)